{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "loading-spinner",
  "type": "registry:component",
  "title": "Loading Spinner",
  "description": "A loading spinner component to indicate loading status.",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "files": [
    {
      "path": "src/registry/default/loading-spinner.tsx",
      "content": "\"use client\";\nimport { motion } from \"motion/react\";\n\nexport interface LoaderProps {\n  loading?: boolean;\n  color?: string;\n  speedMultiplier?: number;\n  height?: number;\n  width?: number;\n  radius?: number;\n}\nexport default function LoadingSpinner({\n  loading = true,\n  color = \"white\",\n  speedMultiplier = 1, // changing this is causing issue\n  height = 15,\n  width = 5,\n  radius = 16,\n}: LoaderProps) {\n  if (!loading) {\n    return null;\n  }\n\n  const numBars = 8;\n  const animationDuration = 1 / speedMultiplier;\n  const staggerDelay = 0.12;\n  const spinnerRadius = 20; // distance of each bar from the center\n\n  return (\n    <motion.div className=\"relative\">\n      {Array.from({ length: numBars }).map((_, i) => {\n        const rotation = i * (360 / numBars);\n\n        return (\n          <motion.div\n            key={i}\n            style={{\n              position: \"absolute\",\n              // Center the bar initially before rotating\n              top: `calc(50% - ${height / 2}px)`,\n              left: `calc(50% - ${width / 2}px)`,\n              width: `${width}px`,\n              height: `${height}px`,\n              backgroundColor: color,\n              borderRadius: `${radius}px`,\n              // This is the key: it sets the pivot point for the rotation.\n              // We push the pivot point down, so the bar rotates around a central point.\n              transformOrigin: `center ${spinnerRadius + height / 2}px`,\n            }}\n            initial={{\n              rotate: rotation,\n            }}\n            animate={{\n              opacity: [1, 0.3, 0, 1],\n            }}\n            transition={{\n              duration: animationDuration,\n              repeat: Infinity,\n              ease: \"easeInOut\",\n              delay: i * staggerDelay,\n            }}\n          />\n        );\n      })}\n    </motion.div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}